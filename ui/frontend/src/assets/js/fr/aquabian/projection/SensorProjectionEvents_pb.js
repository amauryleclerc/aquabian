/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.exportSymbol('proto.domain.command.AddMeasureEvent', null, global);
goog.exportSymbol('proto.domain.command.AddSensorEvent', null, global);
goog.exportSymbol('proto.domain.command.CurrentStateEvent', null, global);
goog.exportSymbol('proto.domain.command.Measure', null, global);
goog.exportSymbol('proto.domain.command.Sensor', null, global);
goog.exportSymbol('proto.domain.command.SensorProjectionEvent', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.domain.command.SensorProjectionEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.domain.command.SensorProjectionEvent.oneofGroups_);
};
goog.inherits(proto.domain.command.SensorProjectionEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.domain.command.SensorProjectionEvent.displayName = 'proto.domain.command.SensorProjectionEvent';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.domain.command.SensorProjectionEvent.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.domain.command.SensorProjectionEvent.EventCase = {
  EVENT_NOT_SET: 0,
  CURRENTSTATEEVENT: 1,
  ADDSENSOREVENT: 2,
  ADDMEASUREEVENT: 3
};

/**
 * @return {proto.domain.command.SensorProjectionEvent.EventCase}
 */
proto.domain.command.SensorProjectionEvent.prototype.getEventCase = function() {
  return /** @type {proto.domain.command.SensorProjectionEvent.EventCase} */(jspb.Message.computeOneofCase(this, proto.domain.command.SensorProjectionEvent.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.domain.command.SensorProjectionEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.domain.command.SensorProjectionEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.domain.command.SensorProjectionEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.command.SensorProjectionEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    currentstateevent: (f = msg.getCurrentstateevent()) && proto.domain.command.CurrentStateEvent.toObject(includeInstance, f),
    addsensorevent: (f = msg.getAddsensorevent()) && proto.domain.command.AddSensorEvent.toObject(includeInstance, f),
    addmeasureevent: (f = msg.getAddmeasureevent()) && proto.domain.command.AddMeasureEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.domain.command.SensorProjectionEvent}
 */
proto.domain.command.SensorProjectionEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.domain.command.SensorProjectionEvent;
  return proto.domain.command.SensorProjectionEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.domain.command.SensorProjectionEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.domain.command.SensorProjectionEvent}
 */
proto.domain.command.SensorProjectionEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.domain.command.CurrentStateEvent;
      reader.readMessage(value,proto.domain.command.CurrentStateEvent.deserializeBinaryFromReader);
      msg.setCurrentstateevent(value);
      break;
    case 2:
      var value = new proto.domain.command.AddSensorEvent;
      reader.readMessage(value,proto.domain.command.AddSensorEvent.deserializeBinaryFromReader);
      msg.setAddsensorevent(value);
      break;
    case 3:
      var value = new proto.domain.command.AddMeasureEvent;
      reader.readMessage(value,proto.domain.command.AddMeasureEvent.deserializeBinaryFromReader);
      msg.setAddmeasureevent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.domain.command.SensorProjectionEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.domain.command.SensorProjectionEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.domain.command.SensorProjectionEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.command.SensorProjectionEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCurrentstateevent();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.domain.command.CurrentStateEvent.serializeBinaryToWriter
    );
  }
  f = message.getAddsensorevent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.domain.command.AddSensorEvent.serializeBinaryToWriter
    );
  }
  f = message.getAddmeasureevent();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.domain.command.AddMeasureEvent.serializeBinaryToWriter
    );
  }
};


/**
 * optional CurrentStateEvent currentStateEvent = 1;
 * @return {?proto.domain.command.CurrentStateEvent}
 */
proto.domain.command.SensorProjectionEvent.prototype.getCurrentstateevent = function() {
  return /** @type{?proto.domain.command.CurrentStateEvent} */ (
    jspb.Message.getWrapperField(this, proto.domain.command.CurrentStateEvent, 1));
};


/** @param {?proto.domain.command.CurrentStateEvent|undefined} value */
proto.domain.command.SensorProjectionEvent.prototype.setCurrentstateevent = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.domain.command.SensorProjectionEvent.oneofGroups_[0], value);
};


proto.domain.command.SensorProjectionEvent.prototype.clearCurrentstateevent = function() {
  this.setCurrentstateevent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.domain.command.SensorProjectionEvent.prototype.hasCurrentstateevent = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional AddSensorEvent addSensorEvent = 2;
 * @return {?proto.domain.command.AddSensorEvent}
 */
proto.domain.command.SensorProjectionEvent.prototype.getAddsensorevent = function() {
  return /** @type{?proto.domain.command.AddSensorEvent} */ (
    jspb.Message.getWrapperField(this, proto.domain.command.AddSensorEvent, 2));
};


/** @param {?proto.domain.command.AddSensorEvent|undefined} value */
proto.domain.command.SensorProjectionEvent.prototype.setAddsensorevent = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.domain.command.SensorProjectionEvent.oneofGroups_[0], value);
};


proto.domain.command.SensorProjectionEvent.prototype.clearAddsensorevent = function() {
  this.setAddsensorevent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.domain.command.SensorProjectionEvent.prototype.hasAddsensorevent = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional AddMeasureEvent addMeasureEvent = 3;
 * @return {?proto.domain.command.AddMeasureEvent}
 */
proto.domain.command.SensorProjectionEvent.prototype.getAddmeasureevent = function() {
  return /** @type{?proto.domain.command.AddMeasureEvent} */ (
    jspb.Message.getWrapperField(this, proto.domain.command.AddMeasureEvent, 3));
};


/** @param {?proto.domain.command.AddMeasureEvent|undefined} value */
proto.domain.command.SensorProjectionEvent.prototype.setAddmeasureevent = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.domain.command.SensorProjectionEvent.oneofGroups_[0], value);
};


proto.domain.command.SensorProjectionEvent.prototype.clearAddmeasureevent = function() {
  this.setAddmeasureevent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.domain.command.SensorProjectionEvent.prototype.hasAddmeasureevent = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.domain.command.CurrentStateEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.domain.command.CurrentStateEvent.repeatedFields_, null);
};
goog.inherits(proto.domain.command.CurrentStateEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.domain.command.CurrentStateEvent.displayName = 'proto.domain.command.CurrentStateEvent';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.domain.command.CurrentStateEvent.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.domain.command.CurrentStateEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.domain.command.CurrentStateEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.domain.command.CurrentStateEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.command.CurrentStateEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    sensorsList: jspb.Message.toObjectList(msg.getSensorsList(),
    proto.domain.command.Sensor.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.domain.command.CurrentStateEvent}
 */
proto.domain.command.CurrentStateEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.domain.command.CurrentStateEvent;
  return proto.domain.command.CurrentStateEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.domain.command.CurrentStateEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.domain.command.CurrentStateEvent}
 */
proto.domain.command.CurrentStateEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.domain.command.Sensor;
      reader.readMessage(value,proto.domain.command.Sensor.deserializeBinaryFromReader);
      msg.addSensors(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.domain.command.CurrentStateEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.domain.command.CurrentStateEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.domain.command.CurrentStateEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.command.CurrentStateEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSensorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.domain.command.Sensor.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Sensor sensors = 1;
 * @return {!Array.<!proto.domain.command.Sensor>}
 */
proto.domain.command.CurrentStateEvent.prototype.getSensorsList = function() {
  return /** @type{!Array.<!proto.domain.command.Sensor>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.domain.command.Sensor, 1));
};


/** @param {!Array.<!proto.domain.command.Sensor>} value */
proto.domain.command.CurrentStateEvent.prototype.setSensorsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.domain.command.Sensor=} opt_value
 * @param {number=} opt_index
 * @return {!proto.domain.command.Sensor}
 */
proto.domain.command.CurrentStateEvent.prototype.addSensors = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.domain.command.Sensor, opt_index);
};


proto.domain.command.CurrentStateEvent.prototype.clearSensorsList = function() {
  this.setSensorsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.domain.command.AddSensorEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.domain.command.AddSensorEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.domain.command.AddSensorEvent.displayName = 'proto.domain.command.AddSensorEvent';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.domain.command.AddSensorEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.domain.command.AddSensorEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.domain.command.AddSensorEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.command.AddSensorEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    sensor: (f = msg.getSensor()) && proto.domain.command.Sensor.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.domain.command.AddSensorEvent}
 */
proto.domain.command.AddSensorEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.domain.command.AddSensorEvent;
  return proto.domain.command.AddSensorEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.domain.command.AddSensorEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.domain.command.AddSensorEvent}
 */
proto.domain.command.AddSensorEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.domain.command.Sensor;
      reader.readMessage(value,proto.domain.command.Sensor.deserializeBinaryFromReader);
      msg.setSensor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.domain.command.AddSensorEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.domain.command.AddSensorEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.domain.command.AddSensorEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.command.AddSensorEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSensor();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.domain.command.Sensor.serializeBinaryToWriter
    );
  }
};


/**
 * optional Sensor sensor = 1;
 * @return {?proto.domain.command.Sensor}
 */
proto.domain.command.AddSensorEvent.prototype.getSensor = function() {
  return /** @type{?proto.domain.command.Sensor} */ (
    jspb.Message.getWrapperField(this, proto.domain.command.Sensor, 1));
};


/** @param {?proto.domain.command.Sensor|undefined} value */
proto.domain.command.AddSensorEvent.prototype.setSensor = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.domain.command.AddSensorEvent.prototype.clearSensor = function() {
  this.setSensor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.domain.command.AddSensorEvent.prototype.hasSensor = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.domain.command.AddMeasureEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.domain.command.AddMeasureEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.domain.command.AddMeasureEvent.displayName = 'proto.domain.command.AddMeasureEvent';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.domain.command.AddMeasureEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.domain.command.AddMeasureEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.domain.command.AddMeasureEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.command.AddMeasureEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    measure: (f = msg.getMeasure()) && proto.domain.command.Measure.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.domain.command.AddMeasureEvent}
 */
proto.domain.command.AddMeasureEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.domain.command.AddMeasureEvent;
  return proto.domain.command.AddMeasureEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.domain.command.AddMeasureEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.domain.command.AddMeasureEvent}
 */
proto.domain.command.AddMeasureEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.domain.command.Measure;
      reader.readMessage(value,proto.domain.command.Measure.deserializeBinaryFromReader);
      msg.setMeasure(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.domain.command.AddMeasureEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.domain.command.AddMeasureEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.domain.command.AddMeasureEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.command.AddMeasureEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMeasure();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.domain.command.Measure.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.domain.command.AddMeasureEvent.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.domain.command.AddMeasureEvent.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Measure measure = 2;
 * @return {?proto.domain.command.Measure}
 */
proto.domain.command.AddMeasureEvent.prototype.getMeasure = function() {
  return /** @type{?proto.domain.command.Measure} */ (
    jspb.Message.getWrapperField(this, proto.domain.command.Measure, 2));
};


/** @param {?proto.domain.command.Measure|undefined} value */
proto.domain.command.AddMeasureEvent.prototype.setMeasure = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.domain.command.AddMeasureEvent.prototype.clearMeasure = function() {
  this.setMeasure(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.domain.command.AddMeasureEvent.prototype.hasMeasure = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.domain.command.Sensor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.domain.command.Sensor.repeatedFields_, null);
};
goog.inherits(proto.domain.command.Sensor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.domain.command.Sensor.displayName = 'proto.domain.command.Sensor';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.domain.command.Sensor.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.domain.command.Sensor.prototype.toObject = function(opt_includeInstance) {
  return proto.domain.command.Sensor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.domain.command.Sensor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.command.Sensor.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    deviceid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    devicename: jspb.Message.getFieldWithDefault(msg, 4, ""),
    measuresList: jspb.Message.toObjectList(msg.getMeasuresList(),
    proto.domain.command.Measure.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.domain.command.Sensor}
 */
proto.domain.command.Sensor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.domain.command.Sensor;
  return proto.domain.command.Sensor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.domain.command.Sensor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.domain.command.Sensor}
 */
proto.domain.command.Sensor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDevicename(value);
      break;
    case 5:
      var value = new proto.domain.command.Measure;
      reader.readMessage(value,proto.domain.command.Measure.deserializeBinaryFromReader);
      msg.addMeasures(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.domain.command.Sensor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.domain.command.Sensor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.domain.command.Sensor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.command.Sensor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDeviceid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDevicename();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getMeasuresList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.domain.command.Measure.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.domain.command.Sensor.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.domain.command.Sensor.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.domain.command.Sensor.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.domain.command.Sensor.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string deviceId = 3;
 * @return {string}
 */
proto.domain.command.Sensor.prototype.getDeviceid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.domain.command.Sensor.prototype.setDeviceid = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string deviceName = 4;
 * @return {string}
 */
proto.domain.command.Sensor.prototype.getDevicename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.domain.command.Sensor.prototype.setDevicename = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated Measure measures = 5;
 * @return {!Array.<!proto.domain.command.Measure>}
 */
proto.domain.command.Sensor.prototype.getMeasuresList = function() {
  return /** @type{!Array.<!proto.domain.command.Measure>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.domain.command.Measure, 5));
};


/** @param {!Array.<!proto.domain.command.Measure>} value */
proto.domain.command.Sensor.prototype.setMeasuresList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.domain.command.Measure=} opt_value
 * @param {number=} opt_index
 * @return {!proto.domain.command.Measure}
 */
proto.domain.command.Sensor.prototype.addMeasures = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.domain.command.Measure, opt_index);
};


proto.domain.command.Sensor.prototype.clearMeasuresList = function() {
  this.setMeasuresList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.domain.command.Measure = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.domain.command.Measure, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.domain.command.Measure.displayName = 'proto.domain.command.Measure';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.domain.command.Measure.prototype.toObject = function(opt_includeInstance) {
  return proto.domain.command.Measure.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.domain.command.Measure} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.command.Measure.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    date: (f = msg.getDate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.domain.command.Measure}
 */
proto.domain.command.Measure.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.domain.command.Measure;
  return proto.domain.command.Measure.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.domain.command.Measure} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.domain.command.Measure}
 */
proto.domain.command.Measure.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setValue(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setDate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.domain.command.Measure.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.domain.command.Measure.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.domain.command.Measure} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domain.command.Measure.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getDate();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional double value = 1;
 * @return {number}
 */
proto.domain.command.Measure.prototype.getValue = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.domain.command.Measure.prototype.setValue = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional google.protobuf.Timestamp date = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.domain.command.Measure.prototype.getDate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.domain.command.Measure.prototype.setDate = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.domain.command.Measure.prototype.clearDate = function() {
  this.setDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.domain.command.Measure.prototype.hasDate = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.domain.command);
